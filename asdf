
INSERT INTO  M_Config(Name,Description,Value,Slug) 
VALUES ('Inventory_Qty_Cutoff', 'Inventory_Qty_Cutoff', '5', 'Inventory_Qty_Cutoff');

INSERT INTO  M_Config(Name,Description,Value,Slug) 
VALUES ('Transaction_X_Days', 'Transaction_X_Days', '30', 'Transaction_X_Days');

INSERT INTO  M_Config(Name,Description,Value,Slug) 
VALUES ('Recommendtion_X_Days', 'Recommendtion_X_Days', '30','Recommendtion_X_Days');

INSERT INTO  M_Config(Name,Description,Value,Slug) 
VALUES ('Trending_Days', 'Trending_Days', '365','Trending_Days');

INSERT INTO  M_Config(Name,Description,Value,Slug) 
VALUES ('Popular_Days', 'Popular_Days', '30', 'Popular_Days');

alter table Event_Execution_History add column  `Recommended` varchar(256) default '-1';

alter table Communication_Template add column  `Recommendation_Column` varchar(50) default '-1';
alter table Communication_Template add column  `Recommendation_Type` varchar(50) default '-1';
alter table Communication_Template add column  `Exclude_Stock_out` int(1) default '0';
alter table Communication_Template add column  `Exclude_Transcation_Last` int(1) default '0';
alter table Communication_Template add column  `Exclude_Recommended_Last` int(1) default '0';
alter table Communication_Template add column  `Exclude_Transcation_X_Days` int(1) default '0';
alter table Communication_Template add column  `Exclude_Recommended_X_Days` int(1) default '0';
alter table Communication_Template add column  `Exclude_Never_Brought` int(1) default '0';
alter table Communication_Template add column  `Exclude_No_Image` int(1) default '0';

--- PROCEDURE S_Trending_Genome_Product;

DROP PROCEDURE S_Trending_Genome_Product;

DELIMITER $$
CREATE  PROCEDURE S_Trending_Genome_Product(IN vBatchSize BIGINT)
BEGIN
	DECLARE vStart_Cnt BIGINT DEFAULT 0;
    DECLARE vEnd_Cnt BIGINT;
   
    
	SET vEnd_Cnt = vBatchSize;

	SET @Rec_Cnt = 0;
	SELECT Product_Genome_LOV_Id INTO @Rec_Cnt FROM CDM_Product_Master ORDER BY Product_Genome_LOV_Id ASC LIMIT 1;
	SET vStart_Cnt = @Rec_Cnt;
	SET vEnd_Cnt = vStart_Cnt + vBatchSize;
	
    SET @Rec_Cnt = 0;
    SELECT Product_Genome_LOV_Id INTO @Rec_Cnt FROM CDM_Product_Master ORDER BY Product_Genome_LOV_Id DESC LIMIT 1;
    IF @Rec_Cnt IS NULL THEN 
		SET @Rec_Cnt = 0;
	END IF;
	
	DROP TABLE IF EXISTS CDM_Trending_Genome_Product;
	
CREATE TABLE `CDM_Trending_Genome_Product` (
  `Product_Genome` varchar(512) NOT NULL DEFAULT '',
  `Product_Genome_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Product_Id` bigint(20) NOT NULL,
  `netval` decimal(37,2) DEFAULT NULL,
  `lastDate` date DEFAULT NULL,
  `Trending_Rnk` bigint(21) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

ALTER TABLE CDM_Trending_Genome_Product
		ADD INDEX (Product_Genome),    
		ADD INDEX (Product_Genome_LOV_Id),
		ADD INDEX (Trending_Rnk),
		ADD INDEX (Product_Id);

SET @Trending_Days = 0;
select nvl(max(Value),0) into @Trending_Days  from M_Config where Name="Trending_Days";
	   
	PROCESS_LOOP: LOOP

insert into CDM_Trending_Genome_Product
select distinct cpm.Product_Genome, cpm.Product_Genome_LOV_Id,cpm.Product_Id,sum(Sale_Net_Val) as netval,max(Bill_Date) as lastDate,
row_number() over( partition by Product_Genome_LOV_Id order by netval desc,lastDate desc) Trending_Rnk
from CDM_Product_Master cpm , CDM_Bill_Details cbd
where cpm.Product_Id = cbd.Product_Id  
and Bill_Date > subdate(curdate(), interval @Trending_Days day) 
and Product_Genome_LOV_Id <> -1
and Product_Genome_LOV_Id between vStart_Cnt and vEnd_Cnt
group by cpm.Product_Genome,cpm.Product_Genome_LOV_Id,cpm.Product_Id;
			
		
  		SET vStart_Cnt = vStart_Cnt + vBatchSize;
        SET vEnd_Cnt = vEnd_Cnt + vBatchSize;
        
        IF vStart_Cnt  >= @Rec_Cnt THEN
            LEAVE PROCESS_LOOP;
        END IF;
        
	END LOOP PROCESS_LOOP;

	
END$$
DELIMITER ;


--- PROCEDURE S_rCore_Cust_Remmendation;



DROP PROCEDURE S_rCore_Cust_Remmendation;

DELIMITER $$
CREATE  PROCEDURE S_rCore_Cust_Remmendation(IN vBatchSize BIGINT)
BEGIN
	DECLARE vStart_Cnt BIGINT DEFAULT 0;
    DECLARE vEnd_Cnt BIGINT;
    
	SET vEnd_Cnt = vBatchSize;

	SET @Rec_Cnt = 0;
	SELECT Customer_Id INTO @Rec_Cnt FROM rCore_rankedPickList ORDER BY Customer_Id ASC LIMIT 1;
	SET vStart_Cnt = @Rec_Cnt;
	SET vEnd_Cnt = vStart_Cnt + vBatchSize;
	
    SET @Rec_Cnt = 0;
    SELECT Customer_Id INTO @Rec_Cnt FROM rCore_rankedPickList ORDER BY Customer_Id DESC LIMIT 1;
    IF @Rec_Cnt IS NULL THEN 
		SET @Rec_Cnt = 0;
	END IF;
	
DROP TABLE IF EXISTS rCore_Customer_Recommendation;
	
CREATE TABLE `rCore_Customer_Recommendation` (
  `Customer_Id` bigint(20) DEFAULT NULL,
  `algorithm` varchar(256) DEFAULT NULL,
  `rank_interReco` decimal(5,2) DEFAULT NULL,
  `rank_intraReco` varchar(256) DEFAULT NULL,
  `rank_weightedFinal` decimal(5,2) DEFAULT NULL,
  `recommendation` varchar(256) DEFAULT NULL,
  `Product_Genome_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Product_Id` bigint(20) NOT NULL  DEFAULT -1,
  `Trending_Rnk` bigint(20) NOT NULL  DEFAULT -1,
  `Product_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Product_Name` varchar(256) DEFAULT '',
  `Brand_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Brand_Name` varchar(256) DEFAULT '',
  `BU_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `BU_Name` varchar(256) DEFAULT '',
  `Cat_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Cat_Name` varchar(256) DEFAULT '',
  `Comp_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Comp_Product_Name` varchar(256) DEFAULT '',
  `Dep_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Dep_Name` varchar(256) DEFAULT '',
  `Div_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Div_Name` varchar(256) DEFAULT '',
  `Manuf_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
    `Manuf_Name` varchar(256) DEFAULT '',
  `Season_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Section_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Up_Sell_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Cross_Sell_LOV_Id` bigint(20) NOT NULL DEFAULT -1,
  `Image_LOV_Id`  bigint(20) NOT NULL DEFAULT -1,
  `Image_link` varchar(256) DEFAULT '',
  `To_Be_Excluded`  int(1) NOT NULL DEFAULT '0',
  `Is_Stock_out` int(1) NOT NULL DEFAULT '0',
  `Is_Transcation_X_Days` int(1) NOT NULL DEFAULT '0',
  `Is_Recommended_X_Days` int(1) NOT NULL DEFAULT '0',
  `Is_Never_Brought` int(1) NOT NULL DEFAULT '1',
  `Is_Has_comp_product` int(1) NOT NULL DEFAULT '0',
  `Is_Has_Cross_Sell` int(1) NOT NULL DEFAULT '0',
  `Is_Has_UP_Sell` int(1) NOT NULL DEFAULT '0',
  `Is_Product_In_Exclusion_List` int(1) NOT NULL DEFAULT '0',
  `Is_has_Image` int(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


ALTER TABLE rCore_Customer_Recommendation
		ADD INDEX (Customer_Id),    
		ADD INDEX (algorithm),
		ADD INDEX (Trending_Rnk),
		ADD INDEX (rank_weightedFinal),
		ADD INDEX (To_Be_Excluded),
		ADD INDEX (Is_Stock_out),
		ADD INDEX (Is_Transcation_X_Days),
		ADD INDEX (Is_Recommended_X_Days),
		ADD INDEX (Is_Never_Brought),
		ADD INDEX (Is_Has_comp_product),
		ADD INDEX (Is_Has_Cross_Sell),
		ADD INDEX (Is_Has_UP_Sell),
		ADD INDEX (Is_has_Image)
		;

	

    
	PROCESS_LOOP: LOOP
	
insert  into rCore_Customer_Recommendation(
Customer_Id,
algorithm,
rank_interReco,
rank_intraReco,
rank_weightedFinal,
recommendation,
Product_Genome_LOV_Id,
Product_Id,
Trending_Rnk,
Product_LOV_Id,
Brand_LOV_Id,
BU_LOV_Id,
Cat_LOV_Id,
Comp_LOV_Id,
Dep_LOV_Id,
Div_LOV_Id,
Manuf_LOV_Id,
Season_LOV_Id,
Section_LOV_Id,
Up_Sell_LOV_Id,
Cross_Sell_LOV_Id,
Product_Name ) 
select rcrp.Customer_Id,
rcrp.algorithm,
rcrp.rank_interReco,
rcrp.rank_intraReco,
rcrp.rank_weightedFinal,
rcrp.recommendation,
ctgp.Product_Genome_LOV_Id,
ctgp.Product_Id,
ctgp.Trending_Rnk,
cpm.Product_LOV_Id,
cpm.Brand_LOV_Id,
cpm.BU_LOV_Id,
cpm.Cat_LOV_Id,
cpm.Comp_LOV_Id,
cpm.Dep_LOV_Id,
cpm.Div_LOV_Id,
cpm.Manuf_LOV_Id,
cpm.Season_LOV_Id,
cpm.Section_LOV_Id,
cpm.Up_Sell_LOV_Id,
cpm.Cross_Sell_LOV_Id,
cpm.Product_Name
 from rCore_rankedPickList rcrp, 
CDM_Trending_Genome_Product ctgp,
CDM_Product_Master cpm
where rcrp.recommendation=ctgp.Product_Genome
and ctgp.Product_Id=cpm.Product_Id
and  Trending_Rnk=1 and rcrp.Customer_Id between vStart_Cnt and vEnd_Cnt;

update rCore_Customer_Recommendation rccr, CDM_Brand_Master cbm
set Brand_Name= cbm.Brand_Name
where rccr.Brand_LOV_Id = cbm.LOV_Id 
and rcrp.Customer_Id between vStart_Cnt and vEnd_Cnt;

update rCore_Customer_Recommendation rccr, CDM_Cat_Master cbm
set Cat_Name= cbm.Cat_Name
where rccr.Cat_LOV_Id = cbm.LOV_Id 
and rcrp.Customer_Id between vStart_Cnt and vEnd_Cnt;

update rCore_Customer_Recommendation rccr, CDM_Dep_Master cbm
set Dep_Name= cbm.Dep_Name
where rccr.Dep_LOV_Id = cbm.LOV_Id 
and rcrp.Customer_Id between vStart_Cnt and vEnd_Cnt;

update rCore_Customer_Recommendation rccr, CDM_Div_Master cbm
set Div_Name= cbm.Div_Name
where rccr.Div_LOV_Id = cbm.LOV_Id 
and rcrp.Customer_Id between vStart_Cnt and vEnd_Cnt;



  		SET vStart_Cnt = vStart_Cnt + vBatchSize;
        SET vEnd_Cnt = vEnd_Cnt + vBatchSize;
        
        IF vStart_Cnt  >= @Rec_Cnt THEN
            LEAVE PROCESS_LOOP;
        END IF;
        
	END LOOP PROCESS_LOOP;

	
END$$
DELIMITER ;


DROP PROCEDURE S_Cust_Remmendation_Feature;

DELIMITER $$
CREATE  PROCEDURE S_Cust_Remmendation_Feature(IN vBatchSize BIGINT)
BEGIN
	DECLARE vStart_Cnt BIGINT DEFAULT 0;
    DECLARE vEnd_Cnt BIGINT;
	
	DECLARE done INT DEFAULT False; 
    DECLARE Load_Exe_ID, Exe_ID  int;
    DECLARE V_ID, V_Exclude_Stock_out, V_Exclude_Transcation_Last, V_Exclude_Recommended_Last, V_Exclude_Transcation_X_Days, V_Exclude_Recommended_X_Days, V_Exclude_Never_Brought, V_Exclude_No_Image int default 0;
	Declare V_Reco_Column, V_Reco_Type char(255) default '-1';
	
	 Declare cur1 cursor for select distinct ct.id, Recommendation_Column, Recommendation_Type, Exclude_Stock_out, Exclude_Transcation_Last, Exclude_Recommended_Last, Exclude_Transcation_X_Days, Exclude_Recommended_X_Days, Exclude_Never_Brought, Exclude_No_Image   from 
    Communication_Template ct,Event_Master em ,Event_Execution ee
	where ct.id=em.Communication_Template_ID and em.ID=ee.Event_ID and em.State='Enabled' and Recommendation_Column <> "-1";
	
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = True;
    set foreign_key_checks=0;
    set sql_safe_updates=0;
	
    set Load_Exe_ID = F_Get_Load_Execution_Id();
	insert into ETL_Execution_Details (Procedure_Name, Job_Name, Start_Time, End_Time,`Status`, Load_Execution_ID) 
	    values ('S_Trigger_Context_Recommendation', '',now(),null,'Started', Load_Exe_ID);
		
    set Exe_ID = F_Get_Execution_Id();
	set @Date_ID=(select max(Event_Execution_Date_ID) from Event_Execution_History);
    
	SET vEnd_Cnt = vBatchSize;
	
	

	SET @Rec_Cnt = 0;
	SELECT Customer_Id INTO @Rec_Cnt FROM rCore_Customer_Recommendation ORDER BY Customer_Id ASC LIMIT 1;
	SET vStart_Cnt = @Rec_Cnt;
	SET vEnd_Cnt = vStart_Cnt + vBatchSize;
	
    SET @Rec_Cnt = 0;
    SELECT Customer_Id INTO @Rec_Cnt FROM rCore_Customer_Recommendation ORDER BY Customer_Id DESC LIMIT 1;
    IF @Rec_Cnt IS NULL THEN 
		SET @Rec_Cnt = 0;
	END IF;
	


SET @Transaction_X_Days = 0;
select nvl(max(Value),0) into  @Transaction_X_Days   from M_Config where Name="Transaction_X_Days";

SET @Recommendtion_X_Days = 0;
select nvl(max(Value),0) into  @Recommendtion_X_Days   from M_Config where Name="Recommendtion_X_Days";

SET @Inventory_Qty_Cutoff = 0;
SELECT nvl(max(Value),0) into @Inventory_Qty_Cutoff FROM M_Config WHERE Name = 'Inventory_Qty_Cutoff';
   
PROCESS_LOOP: LOOP

		update rCore_Customer_Recommendation rcr , CDM_Bill_Details cbd 
		set rcr.Is_transcation_X_Days=(case when (cbd.Bill_Date > subdate(curdate(), interval @Transaction_X_Days day) ) then 1 else 0 end),
		 rcr.Is_Never_Brought=0
		where rcr.Customer_Id=cbd.Customer_Id and rcr.Product_Id =cbd.Product_Id
		and rcr.Customer_Id between vStart_Cnt and vEnd_Cnt
		;
				
		update rCore_Customer_Recommendation rcr , CDM_Product_Master cpm 
		set rcr.Is_has_Image = (case when rcr.Image_LOV_Id <> -1 then 1 else 0 end),
		 rcr.Is_Has_comp_product = (case when rcr.Comp_LOV_Id <> -1 then 1 else 0 end),
		 rcr.Is_Has_Cross_Sell = (case when rcr.Cross_Sell_LOV_Id <> -1 then 1 else 0  end),
		 rcr.Is_Has_UP_Sell = (case when rcr.Up_Sell_LOV_Id <> -1 then 1 else 0  end),
		 rcr.Is_Product_In_Exclusion_List= (case when rcr.To_Be_Excluded = 1 then 1 else 0  end)
		where rcr.Product_Id =cpm.Product_Id
		and rcr.Customer_Id between vStart_Cnt and vEnd_Cnt
		; 



		
		
	
  		SET vStart_Cnt = vStart_Cnt + vBatchSize;
        SET vEnd_Cnt = vEnd_Cnt + vBatchSize;
        
        IF vStart_Cnt  >= @Rec_Cnt THEN
            LEAVE PROCESS_LOOP;
        END IF;
        
	END LOOP PROCESS_LOOP;

open cur1;
new_loop: LOOP
FETCH cur1 into V_ID, V_Reco_Column, V_Reco_Type, V_Exclude_Stock_out, V_Exclude_Transcation_Last, V_Exclude_Recommended_Last, V_Exclude_Transcation_X_Days,V_Exclude_Recommended_X_Days,V_Exclude_Never_Brought,V_Exclude_No_Image;
            
			IF done THEN
				 LEAVE new_loop;
			END IF;
		
set @sql1=concat(' update rCore_Customer_Recommendation rcr , Event_Execution_History eeh set rcr.Is_Recommended_X_Days = (case when eeh.Recommended = ',V_Reco_Column,' then 1 else 0 end)  where  rcr.Customer_Id = eeh.Customer_Id AND eeh.Communication_Template_ID = ',V_ID,'  and eeh.Event_Execution_Date_ID > subdate(curdate(), interval ',@Recommendtion_X_Days,' day)');
 
select  @sql1;
  
PREPARE stmt1 from @sql1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;

END LOOP new_loop;
close cur1;
	
END$$
DELIMITER ;


DROP PROCEDURE S_Trigger_Context_Recommendation ;

DELIMITER $$
CREATE  PROCEDURE S_Trigger_Context_Recommendation( )
BEGIN
	
	DECLARE done INT DEFAULT False; 
    DECLARE Load_Exe_ID, Exe_ID  int;
    DECLARE V_ID, V_Exclude_Stock_out, V_Exclude_Transcation_Last, V_Exclude_Recommended_Last, V_Exclude_Transcation_X_Days, V_Exclude_Recommended_X_Days, V_Exclude_Never_Brought, V_Exclude_No_Image int default 0;
	Declare V_Reco_Column, V_Reco_Type char(255) default '-1';
     
    Declare cur1 cursor for select distinct ct.id, Recommendation_Column, Recommendation_Type, Exclude_Stock_out, Exclude_Transcation_Last, Exclude_Recommended_Last, Exclude_Transcation_X_Days, Exclude_Recommended_X_Days, Exclude_Never_Brought, Exclude_No_Image   from 
    Communication_Template ct,Event_Master em ,Event_Execution ee
	where ct.id=em.Communication_Template_ID and em.ID=ee.Event_ID and em.State='Enabled';
	
	
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = True;
    set foreign_key_checks=0;
    set sql_safe_updates=0;
	
    set Load_Exe_ID = F_Get_Load_Execution_Id();
	insert into ETL_Execution_Details (Procedure_Name, Job_Name, Start_Time, End_Time,`Status`, Load_Execution_ID) 
	    values ('S_Trigger_Context_Recommendation', '',now(),null,'Started', Load_Exe_ID);
		
    set Exe_ID = F_Get_Execution_Id();
	set @Date_ID=(select max(Event_Execution_Date_ID) from Event_Execution_History);
	
	
open cur1;
new_loop: LOOP
FETCH cur1 into V_ID, V_Reco_Column, V_Reco_Type, V_Exclude_Stock_out, V_Exclude_Transcation_Last, V_Exclude_Recommended_Last, V_Exclude_Transcation_X_Days,V_Exclude_Recommended_X_Days,V_Exclude_Never_Brought,V_Exclude_No_Image;
            
			IF done THEN
				 LEAVE new_loop;
			END IF;
			
set @cond =" ";		
			
			if (V_Reco_Type <> '-1' ) then
				set @cond = concat(' and algorithm in (',V_Reco_Type,')' );
			END IF;
			
			IF V_Exclude_Stock_out = 1 then  
				set @cond = concat(@cond,' and Is_Stock_out <> 1 ');
			END IF;
			
			IF V_Exclude_Transcation_X_Days = 1 then  
				set @cond = concat(@cond,' and Is_transcation_X_Days <> 1 ');
			END IF;
			
			IF V_Exclude_Recommended_X_Days = 1 then  
				set @cond = concat(@cond,' and Is_Recommended_X_Days <> 1 ');
			END IF;
			
			IF V_Exclude_Never_Brought = 1 then  
				set @cond = concat(@cond,' and Is_Never_Brought <> 1 ');
			END IF;
			
			IF V_Exclude_No_Image = 1 then  
				set @cond = concat(@cond,' and Is_has_Image = 1 ');
			END IF;
			
	
		
set @sql1=concat(' Update Event_Execution_History oech,( SELECT Event_Execution_ID,eeh.Event_ID,eeh.Communication_Template_ID, row_number() over( partition by rcr.Customer_Id order by rank_weightedFinal desc) rank ,',V_Reco_Column,' as Recommended FROM Event_Execution_History eeh, Communication_Template ct, rCore_Customer_Recommendation rcr where eeh.Communication_Template_ID=ct.ID and eeh.Customer_Id = rcr.Customer_Id ',@cond,' and Communication_Template_ID = ',V_ID,' and eeh.Event_Execution_Date_ID=',@Date_ID,' and eeh.In_Control_Group is null and eeh.In_Event_Control_Group is null )ol set oech.Recommended = ol.Recommended where ol.Event_Execution_ID = oech.Event_Execution_ID and rank=1');
 
select  @sql1;
  
PREPARE stmt1 from @sql1;
EXECUTE stmt1;
DEALLOCATE PREPARE stmt1;

END LOOP new_loop;
close cur1;

UPDATE ETL_Execution_Details 
SET 
    Status = 'Succeeded',
    End_Time = NOW()
WHERE
    Load_Execution_ID = Load_Exe_ID
        AND Procedure_Name = 'S_Trigger_Context_Recommendation'
        AND Execution_ID = Exe_ID;



	
END$$
DELIMITER ;
